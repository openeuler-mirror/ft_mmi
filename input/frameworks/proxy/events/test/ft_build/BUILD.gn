# Copyright (c) 2023 Huawei Technologies Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/gn/fangtian.gni")
import("//input/ft_multimodalinput_mini.gni")

group("ft_inputManagerTest") {
  if (input_test_case) {
    deps = [
      ":InputManagerTest",
      ":InputManagerAnrTest",
    ]
  }
}

if (input_test_case) {
  config("input_manager_test_config") {
    include_dirs = [
      "/usr/include/ft/wm",
      "/usr/include/ft/dm",
      "${mmi_path}/frameworks/proxy/events/test",
      "${mmi_path}/frameworks/proxy/events/include",
      "${mmi_path}/stub",
      "${mmi_path}/frameworks/proxy/event_handler/include",
      "${mmi_path}/frameworks/proxy/module_loader/include",
      "${mmi_path}/interfaces/native/innerkits/common/include",
      "${mmi_path}/interfaces/native/innerkits/proxy/include",
      "${mmi_path}/test/unittest/common/include",
      "${mmi_path}/util/network/include",
      "${mmi_path}/util/socket/include",
    ]

    defines = [ "FT_DISBALE_MONITER" ]
    if (input_feature_pointer_drawing) {
      defines += [ "OHOS_BUILD_ENABLE_POINTER_DRAWING" ]
    }
    if (input_feature_input_cooperation) {
      defines += [ "OHOS_BUILD_ENABLE_COOPERATE" ]
    }
    if (input_feature_keyboard) {
      defines += [ "OHOS_BUILD_ENABLE_KEYBOARD" ]
    }
    if (input_feature_mouse) {
      defines += [ "OHOS_BUILD_ENABLE_POINTER" ]
    }
    if (input_feature_touchscreen) {
      defines += [ "OHOS_BUILD_ENABLE_TOUCH" ]
    }
    if (input_feature_interceptor) {
      defines += [ "OHOS_BUILD_ENABLE_INTERCEPTOR" ]
    }
    if (input_feature_monitor) {
      defines += [ "OHOS_BUILD_ENABLE_MONITOR" ]
    }
    if (input_feature_joystick) {
      defines += [ "OHOS_BUILD_ENABLE_JOYSTICK" ]
    }
  }

  ft_executable("InputManagerAnrTest") {
    sources = [
      "${mmi_path}/test/unittest/common/src/event_util_test.cpp",
      "${mmi_path}/test/unittest/common/src/system_info.cpp",
      "${mmi_path}/test/unittest/common/src/window_utils_test.cpp",
      "../ft_input_manager_anr_test.cpp",
    ]

    configs = [
      ":input_manager_test_config",
    ]

    deps = [
      "${mmi_path}/frameworks/proxy/ft_build:libmmi-client",
      "${mmi_path}/util/ft_build:libmmi-util",
    ]

    libs = [ "gtest",
        "wm", ]

    public_configs = [
      "//build/gn/configs/system_libs:hilog_config",
      "//build/gn/configs/system_libs:ipc_core_config",
      "//build/gn/configs/system_libs:eventhandler_config",
      "//build/gn/configs/system_libs:image_config",
    ]
  }

  ft_executable("InputManagerTest") {
    sources = [
      "${mmi_path}/test/unittest/common/src/event_util_test.cpp",
      "${mmi_path}/test/unittest/common/src/system_info.cpp",
      "${mmi_path}/test/unittest/common/src/window_utils_test.cpp",
      "../ft_input_manager_test.cpp",
    ]

    configs = [
      ":input_manager_test_config",
    ]

    deps = [
      "${mmi_path}/frameworks/proxy/ft_build:libmmi-client",
      "${mmi_path}/util/ft_build:libmmi-util",
    ]

    libs = [ "gtest",
        "wm", ]

    public_configs = [
      "//build/gn/configs/system_libs:hilog_config",
      "//build/gn/configs/system_libs:ipc_core_config",
      "//build/gn/configs/system_libs:eventhandler_config",
      "//build/gn/configs/system_libs:image_config",
    ]
  }
}